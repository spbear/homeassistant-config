- alias: Alarm 0800
  trigger:
  - platform: time
    at: '08:00:00'
  condition:
  - condition: state
    entity_id: binary_sensor.workday
    state: 'on'
  action:
  - service: notify.home
    data_template:
      message: "⏰ 08시 기상시간이예요. 밥먹고 수업 준비하세요."

- alias: Alarm 0802
  trigger:
  - platform: time
    at: '08:02:00'
  condition: []
  action:
  - service: notify.home
    data_template:
      message: "
        오늘의 식물 리포트\r
        -----------------\r
        🌲 율마의 수분은 {{ states('sensor.goldcrest_wilma_moisture') }}% 입니다. {% if states('sensor.goldcrest_wilma_moisture') | int < 15 %}🧺 물주기가 필요합니다.{% endif %}\r
        🌿 필리아페페의 수분은 {{ states('sensor.pilea_peperomidoides_moisture') }}% 입니다. {% if states('sensor.pilea_peperomidoides_moisture') | int < 15 %}🧺 물주기가 필요합니다.{% endif %}\r
        🍃 여인초의 수분은 {{ states('sensor.travelerstree_moisture') }}% 입니다. {% if states('sensor.travelerstree_moisture') | int < 15 %}🧺 물주기가 필요합니다.{% endif %}\r
        🌴 아레카야자의 수분은 {{ states('sensor.areca_palm_moisture') }}% 입니다. {% if states('sensor.areca_palm_moisture') | int < 15 %}🧺 물주기가 필요합니다.{% endif %}\r
        🌿 몬스테라의 수분은 {{ states('sensor.monstera_moisture') }}% 입니다. {% if states('sensor.monstera_moisture') | int < 15 %}🧺 물주기가 필요합니다.{% endif %}\r
        🍒 예수살렘체리의 수분은 {{ states('sensor.jerusalem_cherry_moisture') }}% 입니다. {% if states('sensor.jerusalem_cherry_moisture') | int < 15 %}🧺 물주기가 필요합니다.{% endif %}\r
        🌸 포인세티아의 수분은 {{ states('sensor.poinsettia_moisture') }}% 입니다. {% if states('sensor.poinsettia_moisture') | int < 15 %}🧺 물주기가 필요합니다.{% endif %}\r
        🌳 벵갈고무나무의 수분은 {{ states('sensor.bengal_rubber_tree_moisture') }}% 입니다. {% if states('sensor.bengal_rubber_tree_moisture') | int < 15 %}🧺 물주기가 필요합니다.{% endif %}\r
      "

- alias: Alarm 0830
  trigger:
  - platform: time
    at: '08:10:00'
  condition:
  - condition: state
    entity_id: binary_sensor.workday
    state: 'on'
  action:
  - service: notify.home
    data_template:
      message: "⏰ 학생 건강 진단 체크해주세요.\rhttps://hcs.eduro.go.kr/"

- alias: Alarm 0900
  trigger:
  - platform: time
    at: '09:00:00'
  condition:
  - condition: state
    entity_id: binary_sensor.workday
    state: 'on'
  action:
  - service: notify.home
    data_template:
      message: "⏰ 09시 학교 수업 시간이예요."

- alias: Alarm 1300
  trigger:
  - platform: time
    at: '13:00:00'
  condition:
  - condition: or
    conditions:
    - condition: state
      entity_id: binary_sensor.hyunjun_android
      state: 'on'
    - condition: state
      entity_id: binary_sensor.minjun_android
      state: 'on'
  action:
  - service: notify.home
    data_template:
      message: "⏰ 점심시간이예요. 밥먹어요!"

#- alias: Alarm 1400
#  trigger:
#  - platform: time
#    at: '14:00:00'
#  condition:
#  - condition: state
#    entity_id: binary_sensor.workday
#    state: 'on'
#  action:
#  - service: notify.home
#    data_template:
#      message: "⏰ 현준이는 운동+자유시간, 민준이는 남은 EBS할 시간예요."

#- alias: Alarm 1500
#  trigger:
#  - platform: time
#    at: '15:00:00'
#  condition:
#  - condition: state
#    entity_id: binary_sensor.workday
#    state: 'on'
#  action:
#  - service: notify.home
#    data_template:
#      message: "⏰ 현준이는 운동+자유시간, 민준이는 운동할 시간예요."

- alias: Alarm 1800
  trigger:
  - platform: time
    at: '18:00:00'
  condition:
  - condition: state
    entity_id: binary_sensor.workday
    state: 'on'
  action:
  - service: notify.home
    data_template:
      message: "⏰ 저녁시간이예요. 밥먹어요!"

- alias: Alarm 1830
  trigger:
  - platform: time
    at: '18:30:00'
  condition:
  - condition: state
    entity_id: binary_sensor.workday
    state: 'off'
  action:
  - service: notify.home
    data_template:
      message: "⏰ 저녁시간이예요. 밥먹어요!"

- alias: Alarm 2200
  trigger:
  - platform: time
    at: '22:00:00'
  condition: []
  action:
  - service: notify.home
    data_template:
      message: "⏰ 게임 끝"

- alias: Alarm 2300
  trigger:
  - platform: time
    at: '23:00:00'
  condition: []
  action:
  - service: notify.home
    data_template:
      message: "⏰ 잘 시간이예요! 잘 자요!"
