- platform: yr
  name: Weather
  monitored_conditions:
    - symbol
    - temperature
    - humidity
    - fog

- platform: awair
  access_token: !secret awair_token

- platform: template
  sensors:
    room_temperature:
      friendly_name: Room Temperature
      unit_of_measurement: "°C"
      device_class: temperature
      value_template: "{{ '%.1f'|format(states.fan.mi_air_purifier.attributes.temperature) }}"

    washing_machine_power:
      friendly_name: Washing Machine Power
      unit_of_measurement: "W"
      device_class: power
      value_template: "{{ '%.1f'|format(float(states.switch.washingmachine.attributes.current_power_w)) }}
"

    washing_machine_energy:
      friendly_name: Washing Machine Energy
      unit_of_measurement: "kWh"
      device_class: power
      value_template: "{{ '%.1f'|format(float(states.switch.washingmachine.attributes.toady_energy_kwh)) }}
"

    livingroom_tv_power:
      friendly_name: Livingroom TV Power
      unit_of_measurement: "W"
      device_class: power
      value_template: "{{ '%.1f'|format(float(states.switch.livingroom_tv.attributes.power)) }}
"

    livingroom_tv_energy:
      friendly_name: Livingroom TV Energy
      unit_of_measurement: "kWh"
      device_class: power
      value_template: "{{ '%.1f'|format(float(states.switch.livingroom_tv.attributes.energy)) }}
"

    pc_monitor_power:
      friendly_name: PC Monitor Power
      unit_of_measurement: "W"
      device_class: power
      value_template: "{{ '%.1f'|format(float(states.switch.pc_monitor.attributes.power)) }}
"

    pc_monitor_energy:
      friendly_name: PC Monitor Energy
      unit_of_measurement: "kWh"
      device_class: power
      value_template: "{{ '%.1f'|format(float(states.switch.pc_monitor.attributes.energy)) }}
"

    room_humidity:
      friendly_name: Room Humidity
      unit_of_measurement: "%"
      device_class: humidity
      value_template: "{{ states.fan.mi_air_purifier.attributes.humidity }}"

    room_illuminance:
      friendly_name: Room Illuminance
      unit_of_measurement: "lux"
      device_class: illuminance
      value_template: "{{ '%.1f' | format((states.sensor.light_sensor.state | float)) }}"

    room_pm25:
      friendly_name: Room PM2.5
      unit_of_measurement: "㎍/m³"
      value_template: "{{ states.fan.mi_air_purifier.attributes.aqi | int }}"

    livingroom_temperature:
      friendly_name: Living Room Temperature
      unit_of_measurement: "°C"
      device_class: temperature
      value_template: "{{ '%.1f'|format(states.fan.mi_air_purifier_livingroom.attributes.temperature) }}"

    livingroom_humidity:
      friendly_name: Living Room Humidity
      unit_of_measurement: "%"
      device_class: humidity
      value_template: "{{ states.fan.mi_air_purifier_livingroom.attributes.humidity }}"

    livingroom_pm25:
      friendly_name: Living Room PM2.5
      unit_of_measurement: "㎍/m³"
      value_template: "{{ states.fan.mi_air_purifier_livingroom.attributes.aqi | int }}"

    dehumidifier_ip:
      value_template: !secret xiaomi_dehumidifier_ip

    dehumidifier_token:
      value_template: !secret dehumidifier_token


- platform: mqtt
  name: "Mi Scale"
  state_topic: "bt-gateway/miscale/weight/kg"
  value_template: "{{ '%.1f'|format(value | float) }}"
  unit_of_measurement: "kg"

- platform: mqtt
  name: "Light Sensor"
  state_topic: "smartthings/Light Sensor/illuminance"
  value_template: "{{ '%.1f'|format(value | float) }}"
  unit_of_measurement: "lux"

- platform: mqtt
  name: "Weather Sensor Temperature"
  state_topic: "smartthings/Weather Sensor/temperature"
  value_template: "{{ '%.1f'|format(value | float) }}"
  unit_of_measurement: "°C"

- platform: mqtt
  name: "Weather Sensor Humidity"
  state_topic: "smartthings/Weather Sensor/humidity"
  value_template: "{{ '%.1f'|format(value | float) }}"
  unit_of_measurement: "%"

# sensors.yaml
# 한국환경공단 검단 관측소 실시간 정보
- platform: rest
  name: air_quality_time
  scan_interval: 900. # 900초(15분)마다 반복, 매 정시에 정보가 갱신되지만 지연이 있는 경우가 있으므로
  json_attributes:
    - list
  value_template: '{{ value_json["list"][0]["dataTime"] }}'
  resource: !secret air_quality_api

- platform: template
  sensors:
    air_quality_khaivalue:    #통합대기환경수치
      value_template: '{{ states.sensor.air_quality_time.attributes["list"][0]["khaiValue"] }}'
    air_quality_pm25value:    #초미세먼지 농도
      value_template: '{{ states.sensor.air_quality_time.attributes.list[0]["pm25Value"] }}'
      unit_of_measurement: "㎍/m³"
      entity_id: sensor.air_quality_time
    air_quality_pm10value:    #미세먼지 농도
      value_template: '{{ states.sensor.air_quality_time.attributes.list[0]["pm10Value"] }}'
      unit_of_measurement: "㎍/m³"
    air_quality_o3value:    #오존 농도
      value_template: '{{ states.sensor.air_quality_time.attributes.list[0]["o3Value"] }}'
      unit_of_measurement: "ppm"
    air_quality_covalue:    #일산화탄소 농도
      value_template: '{{ states.sensor.air_quality_time.attributes.list[0]["coValue"] }}'
      unit_of_measurement: "ppm"
    air_quality_no2value:    #이산화질소 농도
      value_template: '{{ states.sensor.air_quality_time.attributes.list[0]["no2Value"] }}'
      unit_of_measurement: "ppm"
    air_quality_so2value:    #아황산화탄소 농도
      value_template: '{{ states.sensor.air_quality_time.attributes.list[0]["so2Value"] }}'
      unit_of_measurement: "ppm"
    air_quality_khaigrade:    #통합대기환경지수
      value_template: '{% if states.sensor.air_quality_time.attributes.list[0]["khaiGrade"] == "1" %}Good
                       {% elif states.sensor.air_quality_time.attributes.list[0]["khaiGrade"] == "2" %}Normal
                       {% elif states.sensor.air_quality_time.attributes.list[0]["khaiGrade"] == "3" %}Bad
                       {% elif states.sensor.air_quality_time.attributes.list[0]["khaiGrade"] == "4" %}Very Bad
                       {% else %}N/A
                       {% endif %}'
    air_quality_pm25grade:    #초미세먼지 등급
      value_template: '{% if states.sensor.air_quality_time.attributes.list[0]["pm25Grade1h"]  == "1" %}Good
                       {% elif states.sensor.air_quality_time.attributes.list[0]["pm25Grade1h"] == "2" %}Normal
                       {% elif states.sensor.air_quality_time.attributes.list[0]["pm25Grade1h"] == "3" %}Bad
                       {% elif states.sensor.air_quality_time.attributes.list[0]["pm25Grade1h"] == "4" %}Very Bad
                       {% else %}N/A
                       {% endif %}'
    air_quality_pm10grade:    #미세먼지 등급
      value_template: '{% if states.sensor.air_quality_time.attributes.list[0]["pm10Grade1h"] == "1" %}Good
                       {% elif states.sensor.air_quality_time.attributes.list[0]["pm10Grade1h"] == "2" %}Normal
                       {% elif states.sensor.air_quality_time.attributes.list[0]["pm10Grade1h"] == "3" %}Bad
                       {% elif states.sensor.air_quality_time.attributes.list[0]["pm10Grade1h"] == "4" %}Very Bad
                       {% else %}N/A
                       {% endif %}'
    air_quality_o3grade:  #오존 지수
      value_template: '{% if states.sensor.air_quality_time.attributes.list[0]["o3Grade"] == "1" %}Good
                       {% elif states.sensor.air_quality_time.attributes.list[0]["o3Grade"] == "2" %}Normal
                       {% elif states.sensor.air_quality_time.attributes.list[0]["o3Grade"] == "3" %}Bad
                       {% elif states.sensor.air_quality_time.attributes.list[0]["o3Grade"] == "4" %}Very Bad
                       {% else %}N/A
                       {% endif %}'
    air_quality_cograde:  #일산화탄소 지수
      value_template: '{% if states.sensor.air_quality_time.attributes.list[0]["coGrade"] == "1" %}Good
                       {% elif states.sensor.air_quality_time.attributes.list[0]["coGrade"] == "2" %}Normal
                       {% elif states.sensor.air_quality_time.attributes.list[0]["coGrade"] == "3" %}Bad
                       {% elif states.sensor.air_quality_time.attributes.list[0]["coGrade"] == "4" %}Very Bad
                       {% else %}N/A
                       {% endif %}'
