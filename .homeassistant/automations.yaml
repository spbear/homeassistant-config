##########################################################
# MI Air Purifier
##########################################################
- alias: MI Air Purifier from ST
  trigger:
  - platform: mqtt
    topic: smartthings/Mi Air Purifier/switch
  condition:
  - condition: template
    value_template: "{{ states('binary_sensor.mi_air_purifier') != states('fan.mi_air_purifier') }}"
  action:
  - data_template:
      entity_id: fan.mi_air_purifier
    service_template:  >
      fan.turn_{{ trigger.payload }}

- alias: MI Air Purifier from HA
  trigger:
  - platform: state
    entity_id: fan.mi_air_purifier
    from: 'on'
    to: 'off'
  - platform: state
    entity_id: fan.mi_air_purifier
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: mqtt.publish
    data_template:
      topic: smartthings/Mi Air Purifier/switch
      payload: >
        {% if is_state('fan.mi_air_purifier', 'on') %}on{% else %}off{% endif %}


##########################################################
# MI Stading Fan
##########################################################
- alias: MI Stading Fan from ST
  trigger:
  - platform: mqtt
    topic: smartthings/Mi Standing Fan/switch
  condition:
  - condition: template
    value_template: "{{ states('binary_sensor.mi_standing_fan') != states('fan.mi_standing_fan') }}"
  action:
  - data_template:
      entity_id: fan.mi_standing_fan
    service_template:  >
      fan.turn_{{ trigger.payload }}

- alias: MI Stading Fan from HA
  trigger:
  - platform: state
    entity_id: fan.mi_standing_fan
    from: 'on'
    to: 'off'
  - platform: state
    entity_id: fan.mi_standing_fan
    from: 'off'
    to: 'on'
  condition: []
  action:
  - service: mqtt.publish
    data_template:
      topic: smartthings/Mi Standing Fan/switch
      payload: >
        {% if is_state('fan.mi_standing_fan', 'on') %}on{% else %}off{% endif %}

##########################################################
# Samsung Air Conditioner
##########################################################
- alias: Samsung Air Conditioner from MQTT
  trigger:
  - platform: mqtt
    topic: smartthings/Samsung Air Conditioner/switch
  condition: []
  action:
  - service_template: >
      script.script_turn_{% if is_state('switch.samsung_air_conditioner', 'on') %}on{% else %}off{% endif %}_my_room_ac

##########################################################
# Sonos plyalist
##########################################################

# Play Sonos when motion is detected
- alias: Play Sonos when motion is detected
  trigger:
  - platform: state
    entity_id: binary_sensor.room_door_status
    to: 'on'
  - platform: state
    entity_id: binary_sensor.room_door_motion
    to: 'on'
  - platform: state
    entity_id: binary_sensor.room_bed_motion
    to: 'on'
  condition:
  - condition: state
    entity_id: binary_sensor.yunhan_android
    state: 'on'
  - condition: state
    entity_id: media_player.playroom
    state: 'paused'
  - condition: state
    entity_id: binary_sensor.room_bed_sleep
    state: 'off'
  - condition: time
    after: '07:00:00'
    before: '03:00:00'
  - condition: state
    entity_id: binary_sensor.sonos_manual_stop
    state: 'off'
  action:
  - service: script.sonos_play_random

# Play Sonos night song when sleep sensor is detected
- alias: Play Sonos night song when sleep sensor is detected
  trigger:
  - platform: state
    entity_id: binary_sensor.room_bed_sleep
    to: 'on'
  condition:
  - condition: state
    entity_id: binary_sensor.yunhan_android
    state: 'on'
  - condition: state
    entity_id: media_player.playroom
    state: 'playing'
  - condition: time
    after: '20:00:00'
    before: '04:30:00'
  action:
#  - service: script.sonos_say
#    data:
#      sonos_entity: media_player.playroom
#      volume: 0.15
#      message: '취침모드로 음악을 바꿉니다'
#      delay: '00:00:05'
  - service: media_player.media_stop
    data_template:
      entity_id: media_player.playroom
  - wait_template: "{{ is_state('media_player.playroom', 'paused') }}"
  - service: media_player.volume_set
    data_template:
      entity_id: media_player.playroom
      volume_level: 0.12
  - service: script.sonos_play_sleep_song

# Set volume of Sonos when sleep sensor is cleared
- alias: Set volume of Sonos when sleep sensor is cleared
  trigger:
  - platform: state
    entity_id: binary_sensor.room_bed_sleep
    to: 'off'
  condition:
  - condition: state
    entity_id: binary_sensor.yunhan_android
    state: 'on'
  - condition: state
    entity_id: media_player.playroom
    state: 'playing'
  action:
  - service: media_player.media_stop
    data_template:
      entity_id: media_player.playroom
  - wait_template: "{{ is_state('media_player.playroom', 'paused') }}"
  - service: script.sonos_play_random

# Stop Sonos 30 minutes after sleep sensor is detected
- alias: Stop Sonos 60 minutes after sleep sensor is detected
  trigger:
  - platform: state
    entity_id: binary_sensor.room_bed_sleep
    to: 'on'
    for:
      minutes: 30
  - platform: state
    entity_id: media_player.playroom
    to: 'playing'
    for:
      minutes: 30
  condition:
  - condition: state
    entity_id: binary_sensor.yunhan_android
    state: 'on'
  - condition: state
    entity_id: binary_sensor.room_bed_sleep
    state: 'on'
  - condition: state
    entity_id: media_player.playroom
    state: 'playing'
  action:
  - service: media_player.media_stop
    data_template:
      entity_id: media_player.playroom
  - service: mqtt.publish
    data_template:
      topic: sonos/manual_stop
      payload: "off"

# Stop Sonos when I am away
- alias: Stop Sonos when I am away
  trigger:
  - platform: state
    entity_id: media_player.playroom
    to: 'playing'
  - platform: state
    entity_id: binary_sensor.yunhan_android
    to: 'off'
  condition:
  - condition: state
    entity_id: binary_sensor.yunhan_android
    state: 'off'
  action:
  - service_template: media_player.media_stop
    data_template:
      entity_id: media_player.playroom
  - service: mqtt.publish
    data_template:
      topic: sonos/manual_stop
      payload: "off"


# Play / Stop Sonos when I click the switch
- alias: Play / Stop Sonos when I click the switch
  trigger:
    platform: event
    event_type: click
    event_data:
      entity_id: binary_sensor.desktop_switch
      click_type: single
  action:
  - service: mqtt.publish
    data_template:
      topic: sonos/manual_stop
      payload: >
        {% if is_state('media_player.playroom', 'playing') %}on{% else %}off{% endif %}
  - service_template: media_player.media_play_pause
    data_template:
      entity_id: media_player.playroom

# Play next song of Sonos when I double click the switch
- alias: Play next song of Sonos when I double click the switch
  trigger:
    platform: event
    event_type: click
    event_data:
      entity_id: binary_sensor.desktop_switch
      click_type: double
  action:
  - service: script.sonos_play_random

##########################################################
# Virtual Presence
##########################################################
- alias: Minjun's Android Presence to ST
  trigger:
  - entity_id: device_tracker.minjun_android
    platform: state
  condition: []
  action:
  - service: mqtt.publish
    data_template:
      topic: smartthings/Minjun/presence
      payload: >
        {% if is_state('device_tracker.minjun_android', 'home') %}present{% else %}not present{% endif %}

- alias: Hyunjun's Android Presence to ST
  trigger:
  - entity_id: device_tracker.hyunjun_android
    platform: state
  condition: []
  action:
  - service: mqtt.publish
    data_template:
      topic: smartthings/Hyunjun/presence
      payload: >
        {% if is_state('device_tracker.hyunjun_android', 'home') %}present{% else %}not present{% endif %}

- alias: Jiyeon's iPhone Presence to ST
  trigger:
  - entity_id: device_tracker.jiyeon_iphone
    platform: state
  condition: []
  action:
  - service: mqtt.publish
    data_template:
      topic: smartthings/Jiyeon/presence
      payload: >
        {% if is_state('device_tracker.jiyeon_iphone', 'home') %}present{% else %}not present{% endif %}

- alias: SPBEAR's Desktop Presence to ST
  trigger:
  - entity_id: device_tracker.spbear_desktop
    platform: state
  condition: []
  action:
    - service: mqtt.publish
      data_template:
        topic: smartthings/Desktop PC/switch
        payload: >
          {% if is_state('device_tracker.spbear_desktop', 'home') %}on{% else %}off{% endif %}

- alias: Alert Intruder!
  trigger:
    - entity_id: binary_sensor.room_door_status
      platform: state
      to: 'on'
    - entity_id: binary_sensor.room_door_motion
      platform: state
      to: 'on'
    - entity_id: binary_sensor.room_bed_motion
      platform: state
      to: 'on'
  condition:
    - condition: state
      entity_id: binary_sensor.yunhan_android
      state: 'off'
  action:
    - service: script.xiaomi_alarm_alert
